--CREAR TABLAS
CREATE TABLE PROYECTO_CONDOMINIOS.FILIALES (
ID_FILIAL NUMBER(15) NOT NULL CONSTRAINT PK_FILIALES PRIMARY KEY,
NOMBRE VARCHAR2(30),
CANT_APART NUMBER(3),
ID_PROVINCIA NUMBER(2) NOT NULL,
ID_CANTON NUMBER(3) NOT NULL,
ID_DISTRITO NUMBER(4) NOT NULL,
HABILITADO CHAR(1)
);

CREATE TABLE PROYECTO_CONDOMINIOS.PROVINCIAS(
ID_PROVINCIA NUMBER (2) NOT NULL CONSTRAINT PK_PROVINCIAS PRIMARY KEY,
DESCRIPCION VARCHAR2(20) NOT NULL 
);
CREATE TABLE PROYECTO_CONDOMINIOS.CANTONES(
ID_CANTON NUMBER (3) NOT NULL CONSTRAINT PK_CANTONES PRIMARY KEY,
DESCRIPCION VARCHAR2(30) NOT NULL 
);
CREATE TABLE PROYECTO_CONDOMINIOS.DISTRITOS(
ID_DISTRITO NUMBER (4) NOT NULL CONSTRAINT PK_DISTRITOS  PRIMARY KEY,
DESCRIPCION VARCHAR2(30) NOT NULL 
);

CREATE TABLE PROYECTO_CONDOMINIOS.DUEÑOS (
ID_DUEÑO VARCHAR2 (15) NOT NULL CONSTRAINT PK_DUEÑOS PRIMARY KEY,
NOMBRE VARCHAR2 (15),
APE1 VARCHAR2 (15),
APE2 VARCHAR2 (15),
HABILITADO CHAR(1)
);

CREATE TABLE PROYECTO_CONDOMINIOS.APARTAMENTOS (
ID_CASA VARCHAR2(5) NOT NULL CONSTRAINT PK_APARTAMENTOS  PRIMARY KEY,
ID_FILIAL NUMBER(15) NOT NULL,
ID_DUEÑO VARCHAR2 (15) NOT NULL,
HABILITADO CHAR(1)
);


CREATE TABLE PROYECTO_CONDOMINIOS.CUOTAS (
ID_CUOTA NUMBER (10) NOT NULL CONSTRAINT PK_CUOTAS  PRIMARY KEY,
ID_TIPO NUMBER (1) NOT NULL,
ID_CASA VARCHAR2(5) NOT NULL,
DESCRIPCION VARCHAR2(50),
FECHA DATE,
MONTO FLOAT
);

CREATE TABLE PROYECTO_CONDOMINIOS.TIPO_CUOTAS (
ID_TIPO NUMBER (1) NOT NULL CONSTRAINT PK_TIPO_ACCESOS  PRIMARY KEY,
DESCRIPCION VARCHAR2(50) NOT NULL
);

CREATE TABLE PROYECTO_CONDOMINIOS.ACCESOS (
ID_ACCESO NUMBER (10) NOT NULL CONSTRAINT PK_ACCESOS  PRIMARY KEY,
ID_CASA VARCHAR2(5) NOT NULL,
FECHA_HORA_ENTRADA DATE,
FECHA_HORA_SALIDA DATE,
CEDULA_VISITANTE VARCHAR2 (15)
);


--RELACIONES FILIALES
ALTER TABLE PROYECTO_CONDOMINIOS.FILIALES ADD CONSTRAINT FK_FIL_PROV
FOREIGN KEY (ID_PROVINCIA)
REFERENCES PROYECTO_CONDOMINIOS.PROVINCIAS(ID_PROVINCIA);

ALTER TABLE PROYECTO_CONDOMINIOS.FILIALES ADD CONSTRAINT FK_FIL_CANT
FOREIGN KEY (ID_CANTON)
REFERENCES PROYECTO_CONDOMINIOS.CANTONES(ID_CANTON);

ALTER TABLE PROYECTO_CONDOMINIOS.FILIALES ADD CONSTRAINT FK_FIL_DIST
FOREIGN KEY (ID_DISTRITO)
REFERENCES PROYECTO_CONDOMINIOS.DISTRITOS(ID_DISTRITO);

--REFERENCIAS APARTAMENTOS
ALTER TABLE PROYECTO_CONDOMINIOS.APARTAMENTOS ADD CONSTRAINT FK_APART_FIL
FOREIGN KEY (ID_FILIAL)
REFERENCES PROYECTO_CONDOMINIOS.FILIALES(ID_FILIAL);

ALTER TABLE PROYECTO_CONDOMINIOS.APARTAMENTOS ADD CONSTRAINT FK_APART_DUE
FOREIGN KEY (ID_DUEÑO)
REFERENCES PROYECTO_CONDOMINIOS.DUEÑOS(ID_DUEÑO);

--REFERENCIAS CUOTAS
ALTER TABLE PROYECTO_CONDOMINIOS.CUOTAS ADD CONSTRAINT FK_CUO_TIPO
FOREIGN KEY (ID_TIPO)
REFERENCES PROYECTO_CONDOMINIOS.tipo_cuotas(ID_TIPO);

ALTER TABLE PROYECTO_CONDOMINIOS.CUOTAS ADD CONSTRAINT FK_CUO_APART
FOREIGN KEY (ID_CASA)
REFERENCES PROYECTO_CONDOMINIOS.apartamentos(ID_CASA);


--REFERENCIAS ACCESOS
ALTER TABLE PROYECTO_CONDOMINIOS.ACCESOS ADD CONSTRAINT FK_ACC_APART
FOREIGN KEY (ID_CASA)
REFERENCES PROYECTO_CONDOMINIOS.apartamentos(ID_CASA);



CREATE SEQUENCE SQ_CUOTAS
INCREMENT BY 1
START WITH 1
MAXVALUE 9999999999
MINVALUE 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE SQ_TIPO_CUOTAS
INCREMENT BY 1
START WITH 1
MAXVALUE 9
MINVALUE 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE SQ_ACCESOS
INCREMENT BY 1
START WITH 1
MAXVALUE 9999999999
MINVALUE 1
NOCACHE
NOCYCLE;


CREATE SEQUENCE SQ_FILIALES
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
MINVALUE 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE SQ_PROVINCIAS
INCREMENT BY 1
START WITH 1
MAXVALUE 99
MINVALUE 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE SQ_CANTONES
INCREMENT BY 1
START WITH 1
MAXVALUE 99
MINVALUE 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE SQ_DISTRITOS
INCREMENT BY 1
START WITH 1
MAXVALUE 99
MINVALUE 1
NOCACHE
NOCYCLE;


--INSERTAR DUEÑO
CREATE OR REPLACE PROCEDURE SP_INS_DUE (P_ID IN VARCHAR2, P_NOMBRE IN VARCHAR2, P_APE1 IN VARCHAR2, P_APE2 IN VARCHAR2, P_HABILITADO IN CHAR)
IS
BEGIN
    INSERT INTO DUEÑOS VALUES (P_ID, P_NOMBRE, P_APE1, P_APE2, P_HABILITADO);
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_INS_DUE;
--INSERTAR DUEÑO

--BORRAR DUEÑO
CREATE OR REPLACE PROCEDURE SP_DEL_DUE (P_ID IN VARCHAR2)
IS
BEGIN
    DELETE FROM DUEÑOS WHERE ID_DUEÑO = P_ID;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_DEL_DUE;
--BORRAR DUEÑO

--ACTUALIZAR DUEÑO
CREATE OR REPLACE PROCEDURE SP_UPD_DUE (P_ID IN VARCHAR2, P_NOMBRE IN VARCHAR2, P_APE1 IN VARCHAR2, P_APE2 IN VARCHAR2, P_HABILITADO IN CHAR)
IS
BEGIN
    UPDATE DUEÑOS SET NOMBRE = P_NOMBRE, APE1=P_APE1 , APE2= P_APE2, HABILITADO= P_HABILITADO WHERE ID_DUEÑO = P_ID;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_UPD_DUE;
--ACTUALIZAR DUEÑO




--INSERTAR FILIALES
CREATE OR REPLACE PROCEDURE SP_INS_FIL (P_NOMBRE IN VARCHAR2, P_CANT IN NUMBER, P_PROVINCIA IN NUMBER, P_CANTON IN NUMBER, P_DISTRITO IN NUMBER, P_HABILITADO IN CHAR)
IS
    VAR_PROVINCIA NUMBER(2);
    VAR_CANTON NUMBER(3);
    VAR_DISTRITO NUMBER(4);
BEGIN
    SELECT ID_PROVINCIA INTO VAR_PROVINCIA FROM PROVINCIAS WHERE ID_PROVINCIA = P_PROVINCIA ;
    SELECT ID_CANTON INTO VAR_CANTON FROM CANTONES WHERE ID_CANTON = P_CANTON ;
    SELECT ID_DISTRITO INTO VAR_DISTRITO FROM DISTRITOS WHERE ID_DISTRITO = P_DISTRITO;
    
    INSERT INTO FILIALES VALUES (SQ_FILIALES.NEXTVAL, P_NOMBRE, P_CANT, VAR_PROVINCIA, VAR_CANTON, VAR_DISTRITO, P_HABILITADO);
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_INS_FIL;
--INSERTAR FILIALES

--BORRAR FILIALES
CREATE OR REPLACE PROCEDURE SP_DEL_FIL (P_ID IN VARCHAR2)
IS
BEGIN
    DELETE FROM FILIALES WHERE ID_FILIAL = P_ID;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_DEL_FIL;
--BORRAR FILIALES

--ACTUALIZAR FILIALES
CREATE OR REPLACE PROCEDURE SP_UPD_FIL (P_ID IN NUMBER, P_NOMBRE IN VARCHAR2, P_CANT IN NUMBER, P_PROVINCIA IN NUMBER, P_CANTON IN NUMBER, P_DISTRITO IN NUMBER, P_HABILITADO IN CHAR)
IS
    VAR_PROVINCIA NUMBER(2);
    VAR_CANTON NUMBER(3);
    VAR_DISTRITO NUMBER(4);
BEGIN
    SELECT ID_PROVINCIA INTO VAR_PROVINCIA FROM PROVINCIAS WHERE ID_PROVINCIA = P_PROVINCIA ;
    SELECT ID_CANTON INTO VAR_CANTON FROM CANTONES WHERE ID_CANTON = P_CANTON ;
    SELECT ID_DISTRITO INTO VAR_DISTRITO FROM DISTRITOS WHERE ID_DISTRITO = P_DISTRITO;
    
    
    UPDATE FILIALES SET NOMBRE = P_NOMBRE, CANT_APART = P_CANT, ID_PROVINCIA = VAR_PROVINCIA  , ID_CANTON = VAR_CANTON , ID_DISTRITO = VAR_DISTRITO, HABILITADO= P_HABILITADO WHERE ID_FILIAL = P_ID;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_UPD_FIL;
--ACTUALIZAR FILIAL


--INSERTAR APARTAMENTOS
CREATE OR REPLACE PROCEDURE SP_INS_APAR (P_CASA IN VARCHAR2, P_FILIAL IN NUMBER, P_DUEÑO IN VARCHAR2, P_HABILITADO IN CHAR)
IS
    VAR_ID_FILIAL NUMBER(15);
    VAR_ID_DUEÑO VARCHAR2(15);
BEGIN
    SELECT ID_FILIAL INTO VAR_ID_FILIAL FROM FILIALES WHERE ID_FILIAL = P_FILIAL;
    SELECT ID_DUEÑO INTO VAR_ID_DUEÑO FROM DUEÑOS WHERE ID_DUEÑO = P_DUEÑO;

    INSERT INTO APARTAMENTOS VALUES (P_CASA, VAR_ID_FILIAL, VAR_ID_DUEÑO, P_HABILITADO);
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_INS_APAR;
--INSERTAR APARTAMENTOS

--BORRAR APARTAMENTOS
CREATE OR REPLACE PROCEDURE SP_DEL_APAR (P_CASA IN VARCHAR2)
IS
BEGIN
    DELETE FROM APARTAMENTOS WHERE ID_CASA = P_CASA;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_DEL_APAR;
--BORRAR APARTAMENTOS

--ACTUALIZAR APARTAMENTOS
CREATE OR REPLACE PROCEDURE SP_UPD_APAR (P_CASA IN VARCHAR2, P_FILIAL IN NUMBER, P_DUEÑO IN VARCHAR2, P_HABILITADO IN CHAR)
IS
    VAR_ID_FILIAL NUMBER(15);
    VAR_ID_DUEÑO VARCHAR2(15);
BEGIN
    SELECT ID_FILIAL INTO VAR_ID_FILIAL FROM FILIALES WHERE ID_FILIAL = P_FILIAL;
    SELECT ID_DUEÑO INTO VAR_ID_DUEÑO FROM DUEÑOS WHERE ID_DUEÑO = P_DUEÑO;

    UPDATE APARTAMENTOS SET ID_FILIAL = VAR_ID_FILIAL, ID_DUEÑO = VAR_ID_DUEÑO, HABILITADO = P_HABILITADO WHERE ID_CASA = P_CASA;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_UPD_APAR;
--ACTUALIZAR APARTAMENTOS



--INSERTAR ACCESOS
CREATE OR REPLACE PROCEDURE SP_INS_ACC (P_CASA IN VARCHAR2, P_FH_ENTRADA IN DATE, P_FH_SALIDA DATE, P_ID_VISITANTE IN VARCHAR2)
IS
    VAR_CASA VARCHAR2(5);
BEGIN
    SELECT ID_CASA INTO VAR_CASA FROM ACCESOS WHERE ID_CASA = P_CASA ;

    INSERT INTO ACCESOS VALUES (SQ_ACCESOS.NEXTVAL, VAR_CASA, P_FH_ENTRADA, P_FH_SALIDA, P_ID_VISITANTE);
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_INS_ACC;
--INSERTAR ACCESOS

--BORRAR ACCESOS
CREATE OR REPLACE PROCEDURE SP_DEL_ACC (P_ACCESO IN NUMBER)
IS
BEGIN
    DELETE FROM ACCESOS WHERE ID_ACCESO = P_ACCESO;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_DEL_ACC;
--BORRAR ACCESOS

--ACTUALIZAR ACCESOS
CREATE OR REPLACE PROCEDURE SP_UPD_ACC (P_ACCESO IN NUMBER, P_CASA IN VARCHAR2, P_FH_ENTRADA IN DATE, P_FH_SALIDA DATE, P_ID_VISITANTE IN VARCHAR2)
IS
    VAR_CASA VARCHAR2(5);
BEGIN
    SELECT ID_CASA INTO VAR_CASA FROM ACCESOS WHERE ID_CASA = P_CASA ;

    UPDATE ACCESOS SET ID_CASA = VAR_CASA, FECHA_HORA_ENTRADA = P_FH_ENTRADA, FECHA_HORA_SALIDA = P_FH_SALIDA, CEDULA_VISITANTE = P_ID_VISITANTE WHERE ID_ACCESO = P_ACCESO;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_UPD_ACC;
--ACTUALIZAR ACCESOS




--INSERTAR PROVINCIAS
CREATE OR REPLACE PROCEDURE SP_INS_PROV (P_DESCRIPCION IN VARCHAR2)
IS
BEGIN
    INSERT INTO PROVINCIAS VALUES (SQ_PROVINCIAS.NEXTVAL, P_DESCRIPCION);
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_INS_PROV;
--INSERTAR PROVINCIAS

--BORRAR PROVINCIAS
CREATE OR REPLACE PROCEDURE SP_DEL_PROV (P_ID_PROVINCIA IN NUMBER)
IS
BEGIN
    DELETE FROM PROVINCIAS WHERE ID_PROVINCIA = P_ID_PROVINCIA;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_DEL_PROV;
--BORRAR PROVINCIAS

--ACTUALIZAR PROVINCIAS
CREATE OR REPLACE PROCEDURE SP_UPD_PROV (P_ID_PROVINCIA IN NUMBER, P_DESCRIPCION IN VARCHAR2)
IS
BEGIN
    UPDATE PROVINCIAS SET DESCRIPCION = P_DESCRIPCION WHERE ID_PROVINCIA = P_ID_PROVINCIA;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_UPD_PROV;
--ACTUALIZAR PROVINCIAS





--INSERTAR CANTONES
CREATE OR REPLACE PROCEDURE SP_INS_CANTON (P_DESCRIPCION IN VARCHAR2)
IS
BEGIN
    INSERT INTO CANTONES VALUES (SQ_CANTONES.NEXTVAL, P_DESCRIPCION);
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_INS_CANTON;
--INSERTAR CANTONES

--BORRAR CANTONES
CREATE OR REPLACE PROCEDURE SP_DEL_CANTON (P_ID_CANTON IN NUMBER)
IS
BEGIN
    DELETE FROM CANTONES WHERE ID_CANTON = P_ID_CANTON;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_DEL_CANTON;
--BORRAR CANTONES

--ACTUALIZAR CANTONES
CREATE OR REPLACE PROCEDURE SP_UPD_CANTON (P_ID_CANTON IN NUMBER, P_DESCRIPCION IN VARCHAR2)
IS
BEGIN
    UPDATE CANTONES SET DESCRIPCION = P_DESCRIPCION WHERE ID_CANTON = P_ID_CANTON;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_UPD_CANTON;
--ACTUALIZAR CANTONES





--INSERTAR DISTRITOS
CREATE OR REPLACE PROCEDURE SP_INS_DIST (P_DESCRIPCION IN VARCHAR2)
IS
BEGIN
    INSERT INTO DISTRITOS VALUES (SQ_DISTRITOS.NEXTVAL, P_DESCRIPCION);
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_INS_DIST;
--INSERTAR DISTRITOS

--BORRAR DISTRITOS
CREATE OR REPLACE PROCEDURE SP_DEL_DIST (P_ID_DISTRITO IN NUMBER)
IS
BEGIN
    DELETE FROM DISTRITOS WHERE ID_DISTRITO = P_ID_DISTRITO;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_DEL_DIST;
--BORRAR DISTRITOS

--ACTUALIZAR DISTRITOS
CREATE OR REPLACE PROCEDURE SP_UPD_DIST (P_ID_DISTRITO IN NUMBER, P_DESCRIPCION IN VARCHAR2)
IS
BEGIN
    UPDATE DISTRITOS SET DESCRIPCION = P_DESCRIPCION WHERE ID_DISTRITO = P_ID_DISTRITO;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_UPD_DIST;
--ACTUALIZAR DISTRITOS





--INSERTAR CUOTAS
CREATE OR REPLACE PROCEDURE SP_INS_CUO (P_TIPO IN NUMBER, P_CASA IN VARCHAR2, P_DESCRIPCION IN VARCHAR2, P_FECHA IN DATE, P_MONTO IN FLOAT)
IS
    VAR_TIPO NUMBER(1);
    VAR_CASA VARCHAR2(5);
BEGIN
    SELECT ID_TIPO INTO VAR_TIPO FROM TIPO_CUOTAS WHERE ID_TIPO = P_TIPO;
    SELECT ID_CASA INTO VAR_CASA FROM APARTAMENTOS WHERE ID_CASA = P_CASA;

    INSERT INTO CUOTAS VALUES (SQ_CUOTAS.NEXTVAL, VAR_TIPO, VAR_CASA, P_DESCRIPCION, P_FECHA, P_MONTO);
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_INS_CUO;
--INSERTAR CUOTAS

--BORRAR CUOTAS
CREATE OR REPLACE PROCEDURE SP_DEL_CUO (P_ID IN NUMBER)
IS
BEGIN
    DELETE FROM CUOTAS WHERE ID_CUOTA = P_ID;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_DEL_CUO;
--BORRAR CUOTAS

--ACTUALIZAR CUOTAS
CREATE OR REPLACE PROCEDURE SP_UPD_CUO (P_ID IN NUMBER, P_TIPO IN NUMBER, P_CASA IN VARCHAR2, P_DESCRIPCION IN VARCHAR2, P_FECHA IN DATE, P_MONTO IN FLOAT)
IS
    VAR_TIPO NUMBER(1);
    VAR_CASA VARCHAR2(5);
BEGIN
    SELECT ID_TIPO INTO VAR_TIPO FROM TIPO_CUOTAS WHERE ID_TIPO = P_TIPO;
    SELECT ID_CASA INTO VAR_CASA FROM APARTAMENTOS WHERE ID_CASA = P_CASA;

    UPDATE CUOTAS SET ID_TIPO = VAR_TIPO, ID_CASA = VAR_CASA, DESCRIPCION = P_DESCRIPCION, FECHA= P_FECHA, MONTO = P_MONTO WHERE ID_CUOTA = P_ID;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_UPD_CUO;
--ACTUALIZAR CUOTAS





--INSERTAR TIPO_CUOTAS
CREATE OR REPLACE PROCEDURE SP_INS_T_CUO (P_DESCRIPCION IN VARCHAR2)
IS
BEGIN
    INSERT INTO TIPO_CUOTAS VALUES (SQ_TIPO_CUOTAS.NEXTVAL, P_DESCRIPCION);
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_INS_T_CUO;
--INSERTAR TIPO_CUOTAS

--BORRAR TIPO_CUOTAS
CREATE OR REPLACE PROCEDURE SP_DEL_T_CUO (P_ID_TIPO IN NUMBER)
IS
BEGIN
    DELETE FROM TIPO_CUOTAS WHERE ID_TIPO = P_ID_TIPO;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_DEL_T_CUO;
--BORRAR TIPO_CUOTAS

--ACTUALIZAR TIPO_CUOTAS
CREATE OR REPLACE PROCEDURE SP_UPD_T_CUO (P_ID_TIPO IN NUMBER, P_DESCRIPCION IN VARCHAR2)
IS
BEGIN
    UPDATE TIPO_CUOTAS SET DESCRIPCION = P_DESCRIPCION WHERE ID_TIPO = P_ID_TIPO;
    COMMIT;
EXCEPTION WHEN OTHERS THEN ROLLBACK;
END SP_UPD_T_CUO;
--ACTUALIZAR TIPO_CUOTAS


/*-------------------TRIGGER-------------------*/
/*CUANDO SE INSERTA UN APARTAMENTO, AUTOMATICAMENTE SE ACTUALIZARA LA CANTIDAD DE APARTAMENTOS DENTRO DE LA FILIAL*/
CREATE OR REPLACE TRIGGER TR_APAR_FIL
AFTER INSERT ON APARTAMENTOS
FOR
EACH ROW
    --WHEN PARA QUE PARE
DECLARE
    VAR_CANT NUMBER (3);
    VAR_FILIAL NUMBER (15);
    --VARIABLES
BEGIN   
    SELECT ID_FILIAL INTO VAR_FILIAL FROM FILIALES WHERE ID_FILIAL = :NEW.ID_FILIAL;
    SELECT CANT_APART INTO VAR_CANT FROM FILIALES WHERE ID_FILIAL = VAR_FILIAL;
    
    UPDATE FILIALES SET CANT_APART = VAR_CANT + 1 WHERE ID_FILIAL = VAR_FILIAL;
END;


/*-------------------CURSOR-------------------
ESTRUCTURAS TEMPORALES
CURSOR SE USA PARA MANIPULAR DICHAS ESTRUCTURAS*/
SET SERVEROUTPUT ON; /*PERMITE QUE LO QUE MANDE A PANTALLA SE MANDA AL OUTPUT SCRIPT, ACTIVAR MENSAJES*/
--CURSOR IMPLÍCITO SOLO DEVUELVE UNA LÍNEA
DECLARE 
    VAR_CANT VARCHAR2(40);
BEGIN
    SELECT count(*) INTO VAR_CANT FROM DUEÑOS;
    dbms_output.put_line  ('La cantidad de dueños es: ' || VAR_CANT);
END;



--CURSOR EXPLÍCITO DEVUELVE VARIAS CONSULTAS O FILAS
DECLARE
CURSOR C1 IS
SELECT ID_DUEÑO, NOMBRE, APE1, APE2 FROM DUEÑOS;
    V_ID varchar2(15);
    V_NOMBRE varchar2(15);
    V_APE1 varchar2(15);
    V_APE2 varchar2(15);
BEGIN 
    OPEN C1;
        DBMS_OUTPUT.PUT_LINE('LISTA DE DUEÑOS');
        LOOP
            FETCH C1 INTO V_ID, V_NOMBRE, V_APE1, V_APE2;
            EXIT WHEN C1 %NOTFOUND;
            DBMS_OUTPUT.PUT_LINE( V_ID || ' ' || V_NOMBRE || ' ' || V_APE1 || ' ' || V_APE2);
        END LOOP;
    CLOSE C1;
END;
    


